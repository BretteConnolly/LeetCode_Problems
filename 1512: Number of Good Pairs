#Space and Rank
#11.48 MB
#Beat 95% of users with Python

#Instructions:
#Given an array of integers nums, return the number of good pairs.
#A pair (i, j) is called good if nums[i] == nums[j] and i < j.

#Example 1:
#Input: nums = [1,2,3,1,1,3]
#Output: 4
#Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

#Example 2:
#Input: nums = [1,1,1,1]
#Output: 6
#Explanation: Each pair in the array are good.

#Example 3:
#Input: nums = [1,2,3]
#Output: 0
 
#Constraints:
#1 <= nums.length <= 100
#1 <= nums[i] <= 100

#Solution:
class Solution(object):

    #when calculating the number of pairs in a group of identical numbers, you multiply the first number by the next, and the one after that, and so on until the end. Then you move one to the right and do the same, and so on. This is a backwards summation of (1 + 2 +...+ n), which has a closed form solution of (n^2 - n)/2
    def summation(self, num): 
        sum = (num ** 2 - num) // 2
        return sum

    def numIdenticalPairs(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        good_pairs = 0
        used_nums = {}

        for i in range(len(nums)):
            if nums[i] not in used_nums:
                used_nums[nums[i]] = 1
            else:
                used_nums[nums[i]] += 1 #update the frequency of each number
        
        for num in used_nums:
            good_pairs += self.summation(used_nums[num]) #add the number of pairs for each number
        
        return good_pairs
