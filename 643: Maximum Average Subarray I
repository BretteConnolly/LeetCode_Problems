#Instructions:
#You are given an integer array nums consisting of n elements, and an integer k.
#Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

#Example 1:
#Input: nums = [1,12,-5,-6,50,3], k = 4
#Output: 12.75000
#Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75

#Example 2:
#Input: nums = [5], k = 1
#Output: 5.00000
 
#Constraints:
#n == nums.length
#1 <= k <= n <= 105
#-104 <= nums[i] <= 104

#Solution:

class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        if nums == []:
            return 0.0
        else:
            max_average = 0
            counter = 0
            for i in range(k, len(nums) + 1):
                _sum = sum(nums[counter:i]) #sum of a set of k numbers
                new_max = _sum / k #average
                if new_max > max_average or max_average == 0: #the average cannot be 0 unless nums had only 0s, in which case the function would simply return 0 at the end
                    max_average = new_max #new maximum average
                counter +=1 #the set of k numbers shifts one number to the right
            return max_average
