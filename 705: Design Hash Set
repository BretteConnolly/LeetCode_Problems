#Instructions:
#Design a HashSet without using any built-in hash table libraries.
#Implement MyHashSet class:
#void add(key) Inserts the value key into the HashSet.
#bool contains(key) Returns whether the value key exists in the HashSet or not.
#void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 
#Example 1:
#Input
#["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
#[[], [1], [2], [1], [3], [2], [2], [2], [2]]
#Output
#[null, null, null, true, false, null, true, null, false]
#Explanation
#MyHashSet myHashSet = new MyHashSet();
#myHashSet.add(1);      // set = [1]
#myHashSet.add(2);      // set = [1, 2]
#myHashSet.contains(1); // return True
#myHashSet.contains(3); // return False, (not found)
#myHashSet.add(2);      // set = [1, 2]
#myHashSet.contains(2); // return True
#myHashSet.remove(2);   // set = [1]
#myHashSet.contains(2); // return False, (already removed)
 
#Constraints:
#0 <= key <= 106
#At most 104 calls will be made to add, remove, and contains.

#Solution:
class MyHashSet(object):

    def __init__(self):
        self.size = 0
        self.capacity = 2
        self.set = []
        for i in range(self.capacity):
            self.set.append(None)


    def hash(self, key):
        return key % self.capacity #assigns key an integer index in the hash set
              

    def add(self, key):
        """
        :type key: int
        :rtype: None
        """
        index = self.hash(key)
        while True:
            if self.set[index] == None: #There is nothing at that index
                self.set[index] = key
                self.size += 1
                if self.size >= self.capacity // 2: #The hash set is half full
                    self.rehash()
                return
            elif self.set[index] == key: #The key is already at that index
                return
            index += 1
            index %= self.capacity #the index hashes
    

    def rehash(self):
        self.capacity *= 2
        new_set = []
        for i in range(self.capacity):
            new_set.append(None) #New set is initially empty
        old_set = self.set
        self.set = new_set
        self.size = 0
        for key in old_set:
            if key != None:
                self.add(key) #New set is populated with values from old set
        
  

    def remove(self, key):
        """
        :type key: int
        :rtype: None
        """
        
        if not self.contains(key): #if key is not in the set
            return
        index = self.hash(key)
        while True:
            if self.set[index] == key:
                self.set[index] = None #Nullifies key
                self.size -= 1
                return
            index += 1
            index %= self.capacity #Hashes index


    def contains(self, key):
        """
        :type key: int
        :rtype: bool
        """
        if key in self.set:
            return True
        else:
            return False
