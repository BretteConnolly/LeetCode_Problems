For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of English uppercase letters.

--------------------------------------------------------------------------------------------------------------------------------------------


class Solution(object):
    def gcd(self, length1, length2): #find the length of the GCD. length2 is the shorter length.
        if length2 == 0:
            return length1
        else:
            return self.gcd(length2, (length1 % length2)) #the GCD length will have a modulus of 0

    def check_multiples(self, str, gcd): #check that the string contains nothing but multiples of the GCD
        index = 0
        for i in range(gcd, len(str)):
            if str[index] != str[i]: #the string contains a sequence that is not a multiple of the GCD
                return False
            index += 1
        return True #the string only contains multiples of the GCD

    def gcdOfStrings(self, str1, str2):
        if len(str1) == len(str2):
            gcd = len(str1) #if two numbers are the same, the GCD is that number
        elif len(str1) < len(str2):
            gcd = self.gcd(len(str2), len(str1))
        else:
            gcd = self.gcd(len(str1), len(str2))
        if str1[0:gcd] == str2[0:gcd]: #if the first GCD-length sequences match
            if self.check_multiples(str1, gcd) and self.check_multiples(str2, gcd):
                return str1[0:gcd]
            else:
                return ""
        else:
            return ""
