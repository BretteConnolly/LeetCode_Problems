#Instructions:
#Design a HashMap without using any built-in hash table libraries.
#Implement the MyHashMap class:
#MyHashMap() initializes the object with an empty map.
#void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
#int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
#void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 
#Example 1:
#Input
#["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
#[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
#Output
#[null, null, null, 1, -1, null, 1, null, -1]

#Explanation
#MyHashMap myHashMap = new MyHashMap();
#myHashMap.put(1, 1); // The map is now [[1,1]]
#myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
#myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
#myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
#myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
#myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
#myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
#myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 
#Constraints:
#0 <= key, value <= 106
#At most 104 calls will be made to put, get, and remove.

#Solution:
class ListNode: #linked list for chaining
    def __init__(self, key = -1, val = -1, next = None):
        self.key = key
        self.val = val
        self.next = next

class MyHashMap:
    def __init__(self):
        self.map = [ListNode() for i in range(10000)] #ListNodes are dummy nodes, every index has a dummy node that nodes with keys and values can be attached to later
        #A constraint is that at most 10,000 calls will be made to put, get, and remove

    def hash(self, key):
        return key % len(self.map) #the index never exceeds 10,000

    def put(self, key, value):
        index = self.hash(key)
        cur = self.map[index] #start of the linked list at the index key hashes to
        while cur.next != None: #check cur.next because the first node is a dummy node
            if cur.next.key == key: #if key is in linked list
                cur.next.val = value #update key with new value
                return
            cur = cur.next #traverse linked list
        cur.next = ListNode(key, value) #adds node to the end

    def get(self, key):
        index = self.hash(key)
        cur = self.map[index].next #starts at next because the first node is a dummy node
        while cur != None:
            if cur.key == key:
                return cur.val
            cur = cur.next #traverse linked list
        return -1 #key was not there

    def remove(self, key):
        index = self.hash(key)
        cur = self.map[index]
        while cur != None and cur.next != None:
            if cur.next.key == key:
                cur.next = cur.next.next #node with the key removed
                return
            cur = cur.next #traverse linked list
