"""
For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""
"""



class Solution(object):
    def gcdOfStrings(self, str1, str2):
        """
        :type str1: str
        :type str2: str
        :rtype: str
        """
        common_string = ""
        if len(str1) < len(str2):
            short_word = str1
            long_word = str2
        else:
            short_word = str2
            long_word = str1
        
        string_length = len(long_word)
        even_length = string_length // 2
        odd_length = string_length // 3

        if string_length % 2 == 0:
            common_string = long_word[0: even_length]
            if common_string == short_word:
                return common_string
            else:
                common_string = long_word[0: odd_length]
                if common_string == short_word[0: odd_length]:
                    return common_string
        else:
            common_string = long_word[0: odd_length]
            if common_string == short_word:
                return common_string

        common_string = ""
        return common_string
               
